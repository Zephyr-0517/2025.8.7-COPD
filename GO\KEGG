library(clusterProfiler)
library(org.Hs.eg.db)
library(enrichplot)
library(ggplot2)
library(dplyr)
library(svglite)

gene_file <- "limmadown.csv"
gene_data <- read.csv(gene_file, header = TRUE, stringsAsFactors = FALSE)
gene_symbols <- gene_data$X


gene_df <- bitr(gene_symbols,
                fromType = "SYMBOL",
                toType = "ENTREZID",
                OrgDb = org.Hs.eg.db)
gene_entrez <- gene_df$ENTREZID


background_df <- read.csv("background.csv", header = TRUE, stringsAsFactors = FALSE)
background_symbols <- background_df$Gene
background_entrez <- bitr(background_symbols,
                          fromType = "SYMBOL",
                          toType = "ENTREZID",
                          OrgDb = org.Hs.eg.db)$ENTREZID

ego <- enrichGO(gene = gene_entrez,
                universe = background_entrez,
                OrgDb = org.Hs.eg.db,
                keyType = "ENTREZID",
                ont = "BP",
                pAdjustMethod = "BH",
                pvalueCutoff = 0.05,
                qvalueCutoff = 0.2,
                readable = TRUE)

#ego_simplified <- simplify(ego, cutoff = 0.7, by = "p.adjust", select_fun = min)

go_data <- ego@result %>%
  filter(p.adjust < 0.05) %>%
  mutate(
    GeneRatioNum = as.numeric(sub("/.*", "", GeneRatio)),
    GeneRatioDenom = as.numeric(sub(".*/", "", GeneRatio)),
    BgRatioNum = as.numeric(sub("/.*", "", BgRatio)),
    BgRatioDenom = as.numeric(sub(".*/", "", BgRatio)),
    FoldEnrichment = (GeneRatioNum / GeneRatioDenom) / (BgRatioNum / BgRatioDenom),
    logp = -log10(p.adjust)
  ) %>%
  arrange(p.adjust, desc(Count)) %>%
  head(20) %>%
  mutate(Description = factor(Description, levels = rev(Description)))

ekegg <- enrichKEGG(gene = gene_entrez,
                    universe = background_entrez,
                    organism = 'hsa',
                    pvalueCutoff = 0.05)


kegg_data <- ekegg@result %>%
  filter(p.adjust < 0.05) %>%
  mutate(
    GeneRatioNum = as.numeric(sub("/.*", "", GeneRatio)),
    GeneRatioDenom = as.numeric(sub(".*/", "", GeneRatio)),
    BgRatioNum = as.numeric(sub("/.*", "", BgRatio)),
    BgRatioDenom = as.numeric(sub(".*/", "", BgRatio)),
    FoldEnrichment = (GeneRatioNum / GeneRatioDenom) / (BgRatioNum / BgRatioDenom),
    logp = -log10(p.adjust)
  ) %>%
  arrange(p.adjust, desc(Count)) %>%
  head(20) %>%
  mutate(Description = factor(Description, levels = rev(Description)))



my_colors <- colorRampPalette(c("#deebf7", "#3182bd"))(100)

#my_colors <- colorRampPalette(c("#FF9999", "#990000"))(100)


p1 <- ggplot(go_data, aes(y = reorder(Description, logp), x = FoldEnrichment, fill = logp)) +
  geom_bar(stat = "identity", width = 0.8) +
  geom_text(aes(label = Description), hjust = 0, x = 0.1, color = "black", size = 3.5) +
  scale_y_discrete(labels = setNames(go_data$Count, as.character(go_data$Description))) +
  scale_fill_gradientn(colors = my_colors, name = "-log10(p.adjust)") +
  labs(title = "GO Biological Process", y = "Count", x = "Fold Enrichment") +
  theme_minimal(base_size = 12) +
  theme(panel.grid = element_blank(),
  axis.line = element_line(color = "black"),
  axis.ticks = element_line(color = "black")
  )


p2 <- ggplot(kegg_data, aes(y = reorder(Description, logp), x = FoldEnrichment, fill = logp)) +
  geom_bar(stat = "identity", width = 0.8) +
  geom_text(aes(label = Description), hjust = 0, x = 0.1, color = "black", size = 3.5) +
 scale_y_discrete(labels = setNames(kegg_data$Count, as.character(kegg_data$Description))) +
  scale_fill_gradientn(colors = my_colors, name = "-log10(p.adjust)") +
  labs(title = "KEGG Pathways", y = "Count", x = "Fold Enrichment") +
  theme_minimal(base_size = 12) +
  theme(panel.grid = element_blank(),
  axis.line = element_line(color = "black"),
  axis.ticks = element_line(color = "black")
  )

print(p1)
print(p2)


svglite("GO_enrichment_.svg", width = 8, height = 6)
print(p1)
dev.off()

svglite("KEGG_enrichment_up.svg", width = 8, height = 6)
print(p2)
dev.off()


write.csv(go_data, "cGO_enrichment_simplified_top20.csv", row.names = FALSE)
write.csv(kegg_data, "cKEGG_enrichment_top20.csv", row.names = FALSE)


