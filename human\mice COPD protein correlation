
library(readr)
library(dplyr)
library(ggplot2)
library(pheatmap)
library(ggrepel)

smoke_data <- read_csv("smoke.csv")     
mouse_data <- read_csv("mouse.csv")    
mapping_data <- read_csv("YS.csv")      


colnames(mapping_data)[2:3] <- c("MouseGene", "HumanGene")

gene_map <- setNames(mapping_data$HumanGene, mapping_data$MouseGene)

mouse_data[[1]] <- gene_map[mouse_data[[1]]]

gene_col <- colnames(mouse_data)[1]
mouse_data <- mouse_data %>% filter(!is.na(.data[[gene_col]]))

common_genes <- intersect(smoke_data[[gene_col]], mouse_data[[gene_col]])

smoke_common <- smoke_data %>%
  filter(.data[[gene_col]] %in% common_genes) %>%
  arrange(match(.data[[gene_col]], common_genes))

mouse_common <- mouse_data %>%
  filter(.data[[gene_col]] %in% common_genes) %>%
  arrange(match(.data[[gene_col]], common_genes))

filtered_genes <- common_genes[
  (smoke_common$adj.P.Val <= 0.05) & (mouse_common$adj.P.Val <= 0.05)
]

smoke_filtered <- smoke_common %>%
  filter(.data[[gene_col]] %in% filtered_genes)

mouse_filtered <- mouse_common %>%
  filter(.data[[gene_col]] %in% filtered_genes)

cor_test_result <- cor.test(
  smoke_filtered$logFC,
  mouse_filtered$logFC,
  method = "pearson"
)

cat("Spearman Correlation:", round(cor_test_result$estimate, 3),
    "\nP-value:", cor_test_result$p.value,
    "\n95% CI:", cor_test_result$conf.int, "\n")

plot_df <- data.frame(
  gene = filtered_genes,
  smoke_logFC = smoke_filtered$logFC,
  mouse_logFC = mouse_filtered$logFC
)

p1 <- ggplot(plot_df, aes(x = smoke_logFC, y = mouse_logFC)) +
  geom_point(alpha = 0.7, size = 2) +
  geom_smooth(method = "lm", color = "blue", se = TRUE) +
  geom_hline(yintercept = 0, linetype = "dotted", color = "gray50") +
  geom_vline(xintercept = 0, linetype = "dotted", color = "gray50") +
  geom_text_repel(aes(label = gene), size = 3.2, max.overlaps = 100) +   
  labs(
    title = "Cross-species Differential Expression Correlation",
    subtitle = paste0("Spearman r = ", round(cor_test_result$estimate, 3),
                      ", P = ", signif(cor_test_result$p.value, 3)),
    x = "Smoke Data log2 Fold Change",
    y = "Mapped Mouse Data log2 Fold Change"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    axis.line = element_line(color = "black"),
    axis.ticks = element_line(color = "black"),
    axis.ticks.length = unit(3, "pt"),
    panel.grid = element_blank()
  )


plot(p1)
ggsave("1.svg", p1, width = 7, height = 5)

heatmap_data <- data.frame(
  Gene = filtered_genes,
  Human_logFC = smoke_filtered$logFC,
  Mouse_logFC = mouse_filtered$logFC
)

rownames(heatmap_data) <- heatmap_data$Gene
heatmap_data <- heatmap_data[, -1]

heatmap_data_trimmed <- heatmap_data
heatmap_data_trimmed[heatmap_data_trimmed > 0.5] <- 0.5
heatmap_data_trimmed[heatmap_data_trimmed < -0.5] <- -0.5

pheatmap(heatmap_data_trimmed,
         scale = "none",
         clustering_method = "ward.D2",
         clustering_distance_rows = "euclidean",
         clustering_distance_cols = "euclidean",
         cluster_rows = TRUE,
         cluster_cols = TRUE,
         color = colorRampPalette(c("navy", "white", "firebrick3"))(100),
         fontsize_row = 8,
         fontsize_col = 12,
         main = "Heatmap of Clustered Genes")

human_data <- combined_data %>% filter(Group %in% c("Human_Never", "Human_Smoke"))

p2_violin <- ggplot(human_data, aes(x = Protein, y = Expression, fill = Group)) +
  geom_violin(trim = FALSE, position = position_dodge(0.9), show.legend = FALSE) + 
  stat_summary(fun = "median", geom = "crossbar", width = 0.5, color = "black") + 
  coord_cartesian(ylim = c(-3, 3)) + 
  labs(title = "Human Protein Expression (Violin Plot)",
       x = "Protein",
       y = "Normalized Expression") +
  theme_minimal(base_size = 14) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    panel.border = element_rect(color = "black", fill = NA, linewidth = 0.8),  
    axis.line = element_line(color = "black"),                                 
    axis.ticks = element_line(color = "black"),                               
    axis.ticks.length = unit(3, "pt")
  )


ggsave("human_violin_plot.svg", p2_violin, width = 7, height = 5)


mouse_data <- combined_data %>% filter(Group %in% c("Mouse_Never", "Mouse_Smoke"))

mouse_summary <- mouse_data %>%
  group_by(Protein, Group) %>%
  summarise(
    mean_expr = mean(Expression),
    se_expr = sd(Expression) / sqrt(n())
  )

p3_bar <- ggplot(mouse_summary, aes(x = Protein, y = mean_expr, fill = Group)) +
  geom_bar(stat = "identity", position = position_dodge(0.9), width = 0.7, show.legend = FALSE) +
  geom_errorbar(aes(ymin = mean_expr - se_expr, ymax = mean_expr + se_expr),
                position = position_dodge(0.9), width = 0.25) +
  coord_cartesian(ylim = c(-3, 3)) +  # 强制设定y轴范围为-3到3
  labs(title = "Mouse Protein Expression (Bar Plot with Error Bars)",
       x = "Protein",
       y = "Normalized Expression") +
  theme_minimal(base_size = 14) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    panel.border = element_rect(color = "black", fill = NA, linewidth = 0.8), 
    axis.line = element_line(color = "black"),                                 
    axis.ticks = element_line(color = "black"),
    axis.ticks.length = unit(3, "pt")
  )

ggsave("mouse_bar_plot_with_error_bars.svg", p3_bar, width = 7, height = 5)



library(readr)
library(dplyr)
library(tibble)
library(ggplot2)
library(tidyr)

data <- read_csv("Final_Merged_Data.csv")

human <- data %>%
  filter(smoking_category_duration %in% c("Heavy", "Never")) %>%
  column_to_rownames(var = "id")

target <- filtered_genes[
  (smoke_filtered$logFC > 0 & mouse_filtered$logFC > 0) | 
  (smoke_filtered$logFC < 0 & mouse_filtered$logFC < 0)
]


human_filtered <- human %>%
  dplyr::select(any_of(target), smoking_category_duration) %>%
  mutate(Group = ifelse(smoking_category_duration == "Heavy", "Human_Smoke", "Human_Never")) %>%
  dplyr::select(-smoking_category_duration)

human_long <- human_filtered %>%
  mutate(sample = rownames(human_filtered)) %>%
  pivot_longer(cols = -c(sample, Group), names_to = "Protein", values_to = "Expression")


mouse <- read.csv("Olink mouse.csv", row.names = 1)

）
mouse <- mouse %>%
  dplyr::select(tail(names(mouse), 8))


rownames(mouse) <- toupper(rownames(mouse))
mouse_scaled <- scale(mouse)


mouse_filtered <- mouse_scaled[rownames(mouse_scaled) %in% target, ]
mouse_filtered_df <- as.data.frame(mouse_filtered)

mouse_long <- mouse_filtered_df %>%
  mutate(Protein = rownames(mouse_filtered_df)) %>%
  pivot_longer(cols = -Protein, names_to = "sample", values_to = "Expression") %>%
  mutate(Group = ifelse(grepl("Con", sample), "Mouse_Never", "Mouse_Smoke"))

combined_data <- bind_rows(human_long, mouse_long)


combined_data$Group <- factor(combined_data$Group, levels = c("Human_Never","Human_Smoke","Mouse_Never", "Mouse_Smoke"))


ggplot(combined_data, aes(x = Protein, y = Expression, fill = Group)) +
  geom_boxplot(position = position_dodge(0.9), outlier.size = 1, width = 0.8) +
  coord_cartesian(ylim = c(-3, 3)) +  
  theme_minimal() +
  labs(title = "Protein Expression",
       x = "Protein",
       y = "Normalized Expression") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

ggplot(combined_data, aes(x = Protein, y = Expression, fill = Group)) +
  geom_boxplot(outlier.shape = NA, position = position_dodge(0.9), width = 0.7)+
  coord_cartesian(ylim = c(-3, 3)) + 
  theme_minimal() +
  labs(title = "Protein Expression (without outliers)",
       x = "Protein",
       y = "Normalized Expression") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

library(ggplot2)
library(dplyr)

human_data <- combined_data %>% filter(Group %in% c("Human_Never", "Human_Smoke"))

p2 <- ggplot(human_data, aes(x = Protein, y = Expression, fill = Group)) +
  geom_boxplot(position = position_dodge(0.9), outlier.size = 1, width = 0.8) +
  coord_cartesian(ylim = c(-2.5, 2.5)) +
  labs(title = "Human Protein Expression",
       x = "Protein",
       y = "Normalized Expression") +
  theme_minimal(base_size = 14) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    panel.border = element_rect(color = "black", fill = NA, linewidth = 0.8),  
    axis.line = element_line(color = "black"),                                 
    axis.ticks = element_line(color = "black"),                                
    axis.ticks.length = unit(3, "pt")
  )
plot(p2)
ggsave("2.svg", p2, width = 7, height = 5)

mouse_data <- combined_data %>% filter(Group %in% c("Mouse_Never", "Mouse_Smoke"))

p3 <- ggplot(mouse_data, aes(x = Protein, y = Expression, fill = Group)) +
  geom_boxplot(position = position_dodge(0.9), outlier.size = 1, width = 0.8) +
  coord_cartesian(ylim = c(-2.5, 2.5)) +
  labs(title = "Mouse Protein Expression",
       x = "Protein",
       y = "Normalized Expression") +
  theme_minimal(base_size = 14) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    panel.border = element_rect(color = "black", fill = NA, linewidth = 0.8), 
    axis.line = element_line(color = "black"),                                 
    axis.ticks = element_line(color = "black"),
    axis.ticks.length = unit(3, "pt")
  )

ggsave("3.svg", p3, width = 7, height = 5)

human_data <- combined_data %>% filter(Group %in% c("Human_Never", "Human_Smoke"))

p_values_human <- human_data %>%
  group_by(Protein) %>%
  summarise(p_value = t.test(Expression ~ Group)$p.value)
print(p_values_human)
mouse_data <- combined_data %>% filter(Group %in% c("Mouse_Never", "Mouse_Smoke"))

p_values_mouse <- mouse_data %>%
  group_by(Protein) %>%
  summarise(p_value = t.test(Expression ~ Group)$p.value)

print(p_values_mouse)

p_human_bar <- ggplot(human_summary, aes(x = Protein, y = mean_expr, fill = Group)) +
  geom_bar(stat = "identity", position = position_dodge(0.8), width = 0.7, show.legend = FALSE) +
  geom_errorbar(aes(ymin = mean_expr - se_expr, ymax = mean_expr + se_expr),
                position = position_dodge(0.8), width = 0.25) +
  coord_cartesian(ylim = c(-0.5, 0.5)) + 
  labs(title = "Human Protein Expression (Bar Plot with Error Bars)",
       x = "Protein",
       y = "Normalized Expression") +
  theme_minimal(base_size = 14) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

ggsave("human_bar_plot_with_error_bars.svg", p_human_bar, width = 7, height = 5)
